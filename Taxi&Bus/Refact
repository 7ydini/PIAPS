#include <iostream>
#include <vector>
#include <string>
//#include "Singleton.cpp"

using namespace std;

// Абстрактные базовые классы для пассажира и водителя
int loadAuto(string pasType, BusPeopleFactory bus_factory, string name, int passMax);
class Driver
{
public:
	virtual void info() = 0;
	virtual ~Driver() {}
};

class BoardAnyCar
{
public:
	virtual void info() = 0;
	virtual ~BoardAnyCar() {}
};


class PizzaCarDriver : public Driver
{
public:
	void info() {
		cout << "PizzaCar Driver" << endl;
	}
};
class BoardPizzaCar : public BoardAnyCar
{
public:
	void info() {
		cout << "Pizza" << endl;
	}
};

// Классы всех людей в автобусе
class BusDriver : public Driver
{
public:
	void info() {
		cout << "Bus Driver" << endl;
	}
};

class BoardBus : public BoardAnyCar
{
public:
	int pasMax = 30;
	void info() {
		cout << "Passenger" << endl;
	}
};
// Классы всех людей в такси

class TaxiDriver : public Driver
{
public:
	void info() {
		cout << "Taxi Driver" << endl;
	}
};

class BoardTaxi : public BoardAnyCar
{
public:
	void info() {
		cout << "Passenger" << endl;
	}
};

// Абстрактная фабрика для производства людей

class PeopleFactory
{
public:
	virtual Driver* createDriver() = 0;
	virtual BoardAnyCar* createPassenger() = 0;
	virtual ~PeopleFactory() {}
	//virtual bool check(int pas, int pasMax) = 0;
};

// Фабрика для создания людей в автобусе

class BusPeopleFactory : public PeopleFactory
{
public:
	Driver* createDriver() {
		return new BusDriver;
	}
	BoardAnyCar* createPassenger() {
		return new BoardBus;
	}
	bool check(int pas, int pasMax) {
		if (pas < pasMax) return true;

	}
};

// Фабрика для создания людей в такси

class TaxiPeopleFactory : public PeopleFactory
{
public:
	Driver* createDriver() {
		return new TaxiDriver;
	}
	BoardAnyCar* createPassenger() {
		return new BoardTaxi;
	}
};

class PizzaFactory : public PeopleFactory
{
public:
	Driver* createDriver() {
		return new PizzaCarDriver;
	}
	BoardAnyCar* createPassenger() {
		return new BoardPizzaCar;
	}
};
// Класс, содержащий всех людей в автобусе/такси

class People
{
public:
	~People() {
		int i;
		for (i = 0; i < vi.size(); ++i) delete vi[i];
		for (i = 0; i < va.size(); ++i) delete va[i];
	}
	void info() {
		int i;
		for (i = 0; i < vi.size(); ++i) vi[i]->info();
		for (i = 0; i < va.size(); ++i) va[i]->info();

	}
	vector<Driver*> vi;
	vector<BoardAnyCar*> va;

};

class Game
{
public:
	People* createP(PeopleFactory& factory, int pas) {
		People* p = new People;
		p->vi.push_back(factory.createDriver());
		for (int i = 0; i < pas; i++)
		{
			p->va.push_back(factory.createPassenger());
		}
		return p;
	}
};

int main()
{
	Game game;

	BusPeopleFactory bus_factory;
	TaxiPeopleFactory taxi_factory;
	PizzaFactory pizza_factory;
	BoardBus psmax;
	int g = psmax.pasMax;
	int i = 0;
	People* bus;
	People* taxi;
	People* pizza;
	do {
		cout << "Filling:\n1)Bus\n2)Taxi\n3)PizzaCar\n4)Exit\n" << endl;
		cin >> i;
		switch (i)
		{

		case(1):
			bus = game.createP(bus_factory, loadAuto("Passenger", bus_factory,"Bus", g));
			cout << "Bus went, board:" << endl;
			bus->info();
			break;
		case(2):
			//taxi = game.createP(taxi_factory, loadAuto("Passenger","Taxi", 3));
			cout << "Taxi went, board:" << endl;
			taxi->info();
			break;

		case(3):
			//pizza = game.createP(pizza_factory, loadAuto("Pizza", "PizzaCar", 20));
			cout << "PizzaCar went, board:" << endl;
			pizza-> info();
			break;
		}
	} while (i != 4);
}

int loadAuto(string pasType, BusPeopleFactory bus_factory, string name, int passMax){
	cout << "Fill " << name << endl;
	int pass = 0, j = 0;
	do
	{
		cout << "1)Add "<< pasType <<".\n2)Info\n3)Go Go Go\n" << endl;
		cin >> j;
		switch (j)
		{
		case(1):
			if (bus_factory.check(pass, passMax)){
				pass++;
				cout << pasType <<" added: " << pass << " / " << passMax << ".\n" << endl;
			}
			else cout << name <<" is full\n" << endl;
			break;
		case(2):

			cout << name << " " << pasType << "s: " << pass << " / " << passMax << ".\n" << endl;
			break;
		case(3):
			return pass;
			break;
		}
	} while (j != 3);
}
